#!/bin/bash 

[[ ! -x /usr/bin/mock ]] &&
  { echo "This script requires mock" >&2; exit 1; }

###
### Message handing
###
###   Utilities
###
info () { echo -e "\e[0;32mINFO\e[0m: $*" >&2; }
notice () { echo -e "\e[0;33mNOTICE\e[0m: $*" >&2; }
error () { echo -e "\e[1;31mERROR\e[0m: $*" >&2; }
fatal () { echo -e "\e[0;31mFATAL\e[0m: $*" >&2; exit 1; }

usage () {

  awk '/START of usage/ {flag=1;next} /END of usage/{flag=0} flag {print}' $(dirname $0)/README.md

  exit $1

}

###
### get_latest_release_number [cache_timeout]
###
###    Returns the latest ghost release number, caching the value for 12 hours
###      or for the number of seconds specified.
###
function get_latest_release_number ()
{
  local release_number
  local cache_file="/var/tmp/ghost_release_latest"
  local cache_timeout=${1:-42600} # 12 hours

  if [[ -f $cache_file && $(( $( date +%s ) - $(head -1 $cache_file) )) -lt $cache_timeout ]]
  then
    release_number=$( tail -1 $cache_file )
  else
    release_number=$( curl -s -I https://ghost.org/zip/ghost-latest.zip |
      grep Location: |
      egrep -o '([0-9]+\.){2}[0-9]+' )
    [[ $? != 0 ]] && fatal "Failed to retrieve latest version number via curl"
    echo $( date +%s ) >$cache_file
    echo $release_number >>$cache_file
  fi
  echo $release_number
}

###
### download_ghost_source_zip destination_path release_number
###
###    Downloads the zip archive of the given ghost release if it does not
###Â      already exist
###
function download_ghost_source_zip ()
{
  local release_number=$1
  local destination_path=$2

  local ghost_source="ghost-$release_number.zip"

  if [[ ! -f "$destination_path/$ghost_source" ]]
  then
  # spectool errors out due to poor handling of alt names in the ghost.org
  # SSL certificate. Manually download with curl for now
  #spectool -g -d "_ver $release_number" -C SOURCES SPECS/ghost.spec
    curl -s -f -L -o "$destination_path"/"$ghost_source" http://ghost.org/zip/$ghost_source ||
      fatal "Could not download $ghost_source using curl"
  fi
}

### 
### mock_root_dir mock_root
###
###   Returns the dist value for the given mock root
### 
function mock_root_dist ()
{
  local mock_root=$1
  local dist
  dist=$( awk '/config_opts\['"'"'dist'"'"'\]/ { print $3 }' </etc/mock/$mock_root.cfg )
  echo ${dist//\'/}
}

###
### mock_root_default_arch ()
###
###    Returns the default target arch for the given mock root
function mock_root_default_arch ()
{
  local mock_root=$1
  local arch

  arch=$( awk '/config_opts\['"'"'target_arch'"'"'\]/ { print $3 }' </etc/mock/$mock_root.cfg )
  echo ${arch//\'/}
}

###
### srpms_full_path yum_repo_path mock_root ghost_release_number spec_file
### 
###    Returns the name of the SRPM that mock will produce 
###
function srpm_name ()
{
  local mock_root=$1
  local ghost_release_number=$2
  local spec_file=$3

  local spec_release_number=$( grep -i "Release:" $spec_file | egrep -o '[0-9]+' )  
  local mock_dist=$( mock_root_dist $mock_root )

  echo -n ghost-$ghost_release_number-$spec_release_number.$mock_dist.src.rpm

}

###
### srpms_full_path yum_repo_path mock_root ghost_release_number spec_file rpm_arch
### 
###    Returns the name of the RPM that mock will produce 
###
function rpm_name ()
{
  local srpm=$1
  local rpm_arch=$2
  
  sed -e "s/src/$rpm_arch/" <<< $( basename $srpm )
}


function sign_rpm ()
{
    local rpms=$*

    if [[ ! -z $GHOST_RPM_GPG_PASSPHRASE ]]
    then
      for rpm in $rpms
      do
        rpm --resign $rpm &&
          info "Signed RPM" ||
          error "Could not sign RPM"
      done
    else
      notice "No GPG passphrase specifed, NOT signing RPM"
    fi

}

###
### build_srpm release_number mock_root rpm_spec rpm_sources srpm_path
###
###   Build SRPM of the given version of Ghost from the given spec and sources
###   under the given mock root and place the resulting SRPM in the given path
###
function build_srpm ()
{
  local release_number=$1
  local mock_root=$2
  local rpm_spec=$3
  local rpm_sources=$4
  local srpms_path=$5

 
  if [ ! -f "$srpms_path"/ghost-$release_number-*.src.rpm ]
  then

    [[ -f $rpm_spec ]] || fatal "RPM spec file $rpm_spec is not a file."
    [[ -d $rpm_sources ]] || fatal "RPM source dir $rpm_sources is not a directory."

    download_ghost_source_zip $release_number $rpm_sources ||
      fatal "Failed to download Ghost $release_number zip file"

    /usr/bin/mock --buildsrpm --no-cleanup-after \
      -r $mock_root \
      -D "_ver $release_number" \
      --sources "$rpm_sources" \
      $GHOST_MOCK_VERBOSITY \
      --spec "$rpm_spec" || fatal "Mock failed to build SRPM"
    
    sign_rpm /var/lib/mock/"$mock_root"/result/ghost-$release_number-*.src.rpm

    mv /var/lib/mock/"$mock_root"/result/ghost-$release_number-*.src.rpm $srpms_path/ || fatal "Could not move SRPM into $srpms_path"

    createrepo --update $srpms_path >/dev/null && 
      info "Created/updated yum metadata for SRPMs" ||
      error "Could not create metadata from RPM"

  fi
 
  echo -n $( basename $( ls -1 $srpms_path/ghost-$release_number-*.src.rpm ) ) 
}

###
### build_rpm release_number mock_root rpm_arch srpm rpms_path
###
###  Build the given srpm for the given ghost result into an RPM under
###    mock_root for rpm_arch and place in the given RPMs path
###  
function build_rpm ()
{
  local release_number=$1
  local mock_root=$2
  local rpm_arch=$3
  local srpm=$4
  local rpms_path=$5

  rpm=$( rpm_name $srpm $rpm_arch )

  if [ ! -f "$rpms_path"/ghost-$release_number-*.rpm ]
  then

    /usr/bin/mock -r $mock_root \
      --arch $rpm_arch \
      -D "_ver $release_number" \
      $GHOST_MOCK_VERBOSITY \
      "$srpm" || fatal "Mock failed to build RPM"

    sign_rpm /var/lib/mock/"$mock_root"/result/ghost-$release_number-*.$rpm_arch.rpm

    mv /var/lib/mock/"$mock_root"/result/*.$rpm_arch.rpm $rpms_path/ || fatal "Could not move RPM into $srpms_path"
 
    createrepo --update $rpms_path >/dev/null &&
      info "Created/updated yum metadata for RPMs" ||
      error "Could not create metadata from RPMs"

    return 0
  else
    return 100
  fi
}

: ${GHOST_MOCK_VERBOSITY:='--quiet'}

###
### Set values from environmental variables
###
mock_root=${GHOST_MOCK_ROOT:-'epel-6-x86_64'}
rpm_arch=$GHOST_RPM_ARCH
release_number=${GHOST_RELEASE_NUMBER:-$( get_latest_release_number )}
yum_repo_path=${GHOST_YUM_PATH:-$( readlink -m "$( dirname $0 )"/yum/ )}
rpm_spec=${GHOST_RPM_SPEC:-$( readlink -m "$( dirname $0 )"/ghost.spec )}
rpm_sources=${GHOST_RPM_SOURCES:-$( readlink -m "$( dirname $0 )"/sources )}

###
### Parse options. These override the environmental variables.
###
while getopts "r:a:hs" opt; do
  case $opt in
     r) mock_root=$OPTARG ;;
     a) rpm_arch=$OPTARG ;;
     o) yum_repo_path=$OPTARG ;;
     s) source_only=1 ;;
     h) usage 0 ;;
    \:) usage 1 ;;
    \?) usage 1 ;;
  esac
done
shift $(($OPTIND - 1))
[[ -z "$*" ]] || release_number="$*"

[[ $release_number =~ ([0-9]+.){2}([0-9]+) ]] ||
  fatal "Invalid Ghost release number $release_number"

# Check the existance of the input files
[[ -f /etc/mock/"$mock_root".cfg ]] || fatal "Mock root configuration for $mock_root not found."

: ${rpm_arch:=$( mock_root_default_arch $mock_root )}

info "Building Ghost $release_number for $mock_root $rpm_arch"

rpm_dist=$( mock_root_dist $mock_root )

srpms_path="$yum_repo_path"/"$release_number"/"$rpm_dist"/SRPMS
rpms_path="$yum_repo_path"/"$release_number"/"$rpm_dist"/"$rpm_arch"

mkdir -p "$srpms_path" "$rpms_path"

srpm=$( build_srpm $release_number $mock_root "$rpm_spec" "$rpm_sources" "$srpms_path" )
[[ $? -eq 1 ]] && fatal "SRPM build failed" || info "SRPM $srpm is in $srpms_path"

if [[ -z $source_only ]]
then

  $( build_rpm $release_number $mock_root $rpm_arch "$srpms_path"/"$srpm" "$rpms_path" )
  [[ $? -eq 1 ]] && fatal "RPM build failed" || info "RPMs are in $rpms_path"

fi

exit 0
